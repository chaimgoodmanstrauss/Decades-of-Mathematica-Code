(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)

n[x_]:=N[x,10]

Cent[{A_,C_},{B_,D_}]:=
	n[(A^2 - B^2 + C^2 - D^2)/(2*(A - B))]


Rad[{A_,C_},{B_,D_}]:=n[Abs[
(	(A^2-2*A*B+B^2+C^2-2*C*D+D^2)*
 	(A^2-2*A*B+B^2+C^2+2*C*D+D^2)	)^(1/2)
  /(2(-A + B))]]

phi[x_,Z_]:=(x+r-t)(Z-r-t)/(x-r-t)/(Z+r-t)

phiinv[x_,Z_]:=Block[{p1=n[phi[1,Z]],p0=n[phi[0,Z]],
	pi=n[(Z-r-t)/(Z+r-t)]},

	(p1-pi)(x-p0)/(p1-p0)/(x-pi)]



NewPoint[{z_,w_}]:=Block[{A=z[[1]],B=w[[1]],
				C=z[[2]],D=w[[2]],
				r=Rad[w,z],t=Cent[w,z],Z=A+I*C},
	
	If[B===A, n[{B,D^2/C}], 
		Block[{NP=n[phiinv[n[phi[B+I*D,Z]^2],Z]]},
			{Re[NP],Im[NP]} ],{0} ]]

entry[p1_,p2_,p3_]:=Block[{r=Rad[p1,p2],rr=r^2,c=Cent[p1,p2]}
	,Join[{p1,p2,r,c},
	 If[c===inf, If[p3[[1]]>p1[[1]],
		{Right,p1[[1]],p2[[1]],inf},{Left,p1[[1]],p2[[1]],inf},{yyy}]
									
	,{((p3[[1]]-c)^2+p3[[2]]^2)<rr,ArcCos[(p1[[1]]-c)/r],
		ArcCos[(p2[[1]]-c)/r],rr}, {xxx}]
]]


makestrand[p1_,p2_,cone_]:=Block[
	{r=Rad[p1,p2],rr=r^2,c=Cent[p1,p2]}
	,{p1,p2,r,c,ArcCos[(p1[[1]]-c)/r],
		ArcCos[(p2[[1]]-c)/r],cone}]

edges[p_]:=Block[{len=Length[p]},
	
Join[{len},
Table[entry[p[[k-2]],p[[k-1]],p[[k]] ],{k,3,len}],
{ 
entry[p[[len-1]],p[[len]],p[[1]] ],
entry[p[[len]],p[[1]],p[[2]] ]}
 ]]

PlotLines[e_]:=Join[
Table[If[e[[k]][[3]]===inf, 
	{e[[k]][[1]][[1]],10(theta)},
	{e[[k]][[3]]Cos[Pi*theta]+e[[k]][[4]], 
			e[[k]][[3]]Sin[theta*Pi]	},{1,theta}
	] ,{k,2,Length[e]}]  ]

PlotStrands[e_]:=
Table[
	{e[[k,3]]Cos[theta*e[[k,5]]+(1-theta)e[[k,6]]]+e[[k,4]], 
			e[[k,3]]Sin[theta*e[[k,5]]+(1-theta)e[[k,6]]]} ,
							{k,1,Length[e]}]  

tester[edge_,x_]:=Block[
	{radius=(x[[1]]-edge[[4]])^2+x[[2]]^2},
	
	If[radius===edge[[8]] , False,
		(radius<edge[[8]])===edge[[5]]   ]]
	


WhereIs[x_,polygon_]:=	Block[{i,mm=polygon[[1]]},
	If[ tester[polygon[[2]],x],
			
	i=mm;While[tester[polygon[[i+1]],x] && i>=2, i--]; 
				If[i===mm,1,If[i>1,i+1,"inside"]],
			
	i=1; While[(!tester[polygon[[i+1]],x]) && i<mm, i++]
			;i 
			
	]]

npt[y_]:=
	NewPoint[{y,trian[[WhereIs[y,trian] +1,1]]}]

Iterate[triang_,x_,max_]:=Block[{trian=triang}
,
NestList[npt, x, max]]

PlotIterates[triang_,x_,max_,range_]:= Show[Graphics[
	{AbsolutePointSize[.25],Evaluate [
	Point /@ Iterate[triang,x,max] ]},Axes->True,
		AxesStyle->AbsoluteThickness[.01],PlotRange->range],
ParametricPlot[Evaluate[PlotLines[triang]],{theta,0,1},
	PlotStyle->AbsoluteThickness[.01]] ]


Intersect[strand1_,strand2_]:=
	Block[{
	 C1=strand1[[4]],
	 C2=strand2[[4]],
	 R1=strand1[[3]],
	 R2=strand2[[3]],
	 xint=(C1^2-C2^2-R1^2+R2^2)/2/(C1-C2),
	 discrim=R1^2-(xint-C1)^2},
   
   n[{xint, If[ discrim<0,"miss", Sqrt[discrim]]}]]
	


ConeStrands[polygon_]:=Table[
  Block[{
				ithedge=polygon[[i+1]]},Block[{
				rr=ithedge[[3]],
				cc=ithedge[[4]],
				stt=ithedge[[6]],
				stp=ithedge[[7]],
				ends=If[stt<stp,    								(*ie ith line reads right to left*)
	 				{ {ithedge[[1]],{rr*Cos[.001]+cc,rr*Sin[.001]}},
	 						{stt,.001} },
	 				{ { {cc-rr*Cos[.001],rr*Sin[.001]},ithedge[[1]]},
	 						{3.140592653589793238,stt} } (*note that ends always read left to right*)]
	 	},  
	 	
	 	Join[ends[[1]],{rr,cc},ends[[2]],{i+1}   ]
	]],{i,1,polygon[[1]]} ]
	


FirstStrands[polygon_]:=Table[
Block[{
				ithedge=polygon[[i+1]]},Block[{
				rr=ithedge[[3]],
				cc=ithedge[[4]],
				stt=ithedge[[6]],
				stp=ithedge[[7]],
				ends=If[stt<stp,    								(*first end is near infinity *)
						{ { {cc-rr*Cos[.00001],rr*Sin[.00001]},ithedge[[2]]},
	 						{3.141582653589793238,stp} },
	 				{ { {rr*Cos[.00001]+cc,rr*Sin[.00001]},ithedge[[2]]},
	 						{.00001,stp} }
	 			]},  
	 	
	 	Join[ends[[1]],{rr,cc},ends[[2]],
	 		{WhereIs[ends[[1,1]],polygon]},{"infend"} ]
	]],{i,1,polygon[[1]]} ]

DivideStrand[oldstrand_,cutstrand_,cone1_,cone2_]:=
  Block[
   {cutpt =  Intersect[oldstrand,cutstrand] },
   Block[{ct1=cutpt[[1]],ct2=cutpt[[2]]},
  
  If[ ct2==="miss", {oldstrand}, 
  If[ (ct1===oldstrand[[1]][[1]]) ||
		(ct1===oldstrand[[2]][[1]]), 
			{Join[oldstrand[[{1,6}]],
			 {If[ ct1===oldstrand[[1]][[1]], cone1,cone2 ] },
			 {If[ Length[oldstrand]===8, "infend"]}]},
		
  Block[
  {ctheta=
  	ArcCos[(ct1-oldstrand[[4]])/oldstrand[[3]]]}
	  , 
  { If[Length[oldstrand]===8,{oldstrand[[1]],cutpt,
  		oldstrand[[3]],oldstrand[[4]],
  			oldstrand[[5]],ctheta,cone1,"infend"},
  		{oldstrand[[1]],cutpt,
  		oldstrand[[3]],oldstrand[[4]],
  			oldstrand[[5]],ctheta,cone1}],
  	{cutpt,oldstrand[[2]],oldstrand[[3]],oldstrand[[4]],
  		ctheta,oldstrand[[6]],cone2}  } ]]]]]

NewStrands[oldstrand_,polygon_,TheConeStrand_]:=
	Block[
	{ nend1=
		NewPoint[{oldstrand[[1]],
			polygon[[oldstrand[[7]]+1,1]]  }  ],
	 newend2=
		NewPoint[{oldstrand[[2]],
			polygon[[oldstrand[[7]]+1,1]]  }  ]},
			
	Block[{
	 cone1=WhereIs[nend1,polygon],
	 cone2=WhereIs[newend2,polygon],
	 cc=Cent[nend1,newend2],
	 rr=Rad[nend1,newend2]},
	 (*this next part actually throws away too much...*)
	If[rr>0 && !(cone1==="inside" || cone2==="inside"),
	Block[{
	 sttp= ArcCos[(newend2[[1]]-cc)/rr],
	 infinitend=(Length[oldstrand]===8)},
	Block[{
		   newend1=If[infinitend, 
		   	If[nend1[[1]]<newend2[[1]],
		   	{cc-rr*Cos[.00001],rr*Sin[.00001]},
		   	{cc+rr*Cos[.00001],rr*Sin[.00001]}],
		   nend1]},
	Block[{newstrand=Join[	
	{newend1,newend2,rr,cc,sttrt,sttp,cone1},
	If[infinitend,{"infend"},{}]],
		   sttrt= ArcCos[(newend1[[1]]-cc)/rr]},   
	 
If[  cone1===cone2 , 
	 If[newend1[[1]]===newend2[[1]],{flype},{newstrand}], 
		 
		 
If[ (cone1===1 && cone2===2)||(cone1===2 && cone2===1),
	DivideStrand[newstrand,
		TheConeStrand[[1]],cone1,cone2],

If[ (cone1===2 && cone2===3)||
	(cone1===3 && cone2===3),
	DivideStrand[newstrand,
		TheConeStrand[[2]],cone1,cone2],

(* then (cone1===1 && cone2===3)||
   (cone1===3 && cone2===1) *)
	
	DivideStrand[newstrand,
		TheConeStrand[[3]],cone1,cone2],

	"uhoh"]]]		 
		 
		]]],{}]]]
		 



nnnewlist[oldlist_]:=
	Join @@ Table[
		NewStrands[oldlist[[i]],bb,conelist],
		{i,1,Length[oldlist]} ]





StrandList[b_,depth_]:=Block[{
	conelist=ConeStrands[b],
	startlist=FirstStrands[b],
	bb=b},
	 Join @@ NestList[nnnewlist, startlist,depth]]

