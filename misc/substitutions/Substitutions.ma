(*^::[	Information =	"This is a Mathematica Notebook file.  It contains ASCII text, and can be	transferred by email, ftp, or other text-file transfer utility.  It should	be read or edited using a copy of Mathematica or MathReader.  If you 	received this as email, use your mail application or copy/paste to save 	everything from the line containing (*^ down to the line containing ^*)	into a plain text file.  On some systems you may have to give the file a 	name ending with ".ma" to allow Mathematica to recognize it as a Notebook.	The line below identifies what version of Mathematica created this file,	but it can be opened using any other version as well.";	FrontEndVersion = "Macintosh Mathematica Notebook Front End Version 2.2";	MacintoshStandardFontEncoding; 		fontset = title, inactive, noPageBreakBelow, noPageBreakInGroup, nohscroll, preserveAspect, groupLikeTitle, center, M7, bold, e8,  24, "Times"; 	fontset = subtitle, inactive, noPageBreakBelow, noPageBreakInGroup, nohscroll, preserveAspect, groupLikeTitle, center, M7, bold, e6,  18, "Times"; 	fontset = subsubtitle, inactive, noPageBreakBelow, noPageBreakInGroup, nohscroll, preserveAspect, groupLikeTitle, center, M7, italic, e6,  14, "Times"; 	fontset = section, inactive, noPageBreakBelow, nohscroll, preserveAspect, groupLikeSection, grayBox, M22, bold, a20,  18, "Times"; 	fontset = subsection, inactive, noPageBreakBelow, nohscroll, preserveAspect, groupLikeSection, blackBox, M19, bold, a15,  14, "Times"; 	fontset = subsubsection, inactive, noPageBreakBelow, nohscroll, preserveAspect, groupLikeSection, whiteBox, M18, bold, a12,  12, "Times"; 	fontset = text, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, "Times"; 	fontset = smalltext, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  10, "Times"; 	fontset = input, noPageBreakInGroup, nowordwrap, preserveAspect, groupLikeInput, M42, N23, bold,  12, "Courier"; 	fontset = output, output, inactive, noPageBreakInGroup, nowordwrap, preserveAspect, groupLikeOutput, M42, N23, L-4,  12, "Courier"; 	fontset = message, inactive, noPageBreakInGroup, nowordwrap, preserveAspect, groupLikeOutput, M42, N23,  12, "Courier"; 	fontset = print, inactive, noPageBreakInGroup, nowordwrap, preserveAspect, groupLikeOutput, M42, N23,  12, "Courier"; 	fontset = info, inactive, noPageBreakInGroup, nowordwrap, preserveAspect, groupLikeOutput, M42, N23,  12, "Courier"; 	fontset = postscript, PostScript, formatAsPostScript, output, inactive, noPageBreakInGroup, nowordwrap, preserveAspect, groupLikeGraphics, M7, l34, w282, h287,  12, "Courier"; 	fontset = name, inactive, noPageBreakInGroup, nohscroll, preserveAspect, M7, italic, B32768,  10, "Times"; 	fontset = header, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7, italic,  12, "Times"; 	fontset = leftheader,  12, ""; 	fontset = footer, inactive, nohscroll, noKeepOnOnePage, preserveAspect, center, M7, italic,  12, "Times"; 	fontset = leftfooter,  12, ""; 	fontset = help, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	fontset = clipboard, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	fontset = completions, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, "Courier"; 	fontset = special1, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	fontset = special2, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	fontset = special3, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	fontset = special4, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	fontset = special5, inactive, nohscroll, noKeepOnOnePage, preserveAspect, M7,  12, ""; 	remoteKernel = "freeabel"; ]:[font = subsection; inactive; initialization; preserveAspect]SUBSTITUTION SYSTEMS:[font = text; inactive; initialization; preserveAspect]Set Up:MotifList={ Motif1, Motif2, ....}Motif= {Rule1, Rule2, ...}Rule={ NumOfChild, ChangeOfOrientation, ChangeofScale, ChangeofTranslate }Where Orientation of toplevel is assumed to be Identity, Scale=1, Translate=000If parent has O,S,T,   child has  oO, sS, T+SOtThe scheme is flexible though; for example O could be (n+1)x(n+1) transforms and S & T {}Abstractly, an actual iterate is given by {number in list, O, S, T}                    It would prob be useful to define a number of auxilary commands outside of the MotifList.  Put group commands, motif descriptions etc. hereAction={AuxilaryCommands, Tilemaker, MotifList,  InitValue, Depth,  LeaveOuts,Picture, joiners}                Auxilary Commands is executed; Init value=	{1,{Ident},1,{0,0,0}}is more or less usual,TileMaker[LeaveOuts_][{n,o,s,t}_]   returns graphics output  (or  whatever; writes oogl file)Pix  makes pix,Joiners tells how to append child infoIn particular,  Joiners[]={childsnum, childsor, childsscale, childstrans }        :[font = subsubsection; inactive; initialization; preserveAspect]  Necessary Commands:[font = text; inactive; initialization; preserveAspect]*)(*Motif={numberin list_, orientation_List, Scale_, Transalation_}*):[font = input; initialization; preserveAspect; startGroup]*)SubstituteFor[MotifList_,Joiners_][{motifNum_,O_,S_,T_}]:= 		(rules=MotifList[[motifNum]];			Table[rule=rules[[k]];			      noo=rule[[1]];			      ooo=rule[[2]];			      soo=rule[[3]];			      too=rule[[4]];						Joiners[O,S,T,noo,ooo,soo,too],						{k,1,Length[rules]}   ])												Substitutions[MotifList_,Joiners_][TileList_]:= 		Join @@ (SubstituteFor[MotifList,Joiners] /@ TileList)		RepeatedSubst[MotifList_,InitialTile_,ToDepth_,Joiners_]:=				Nest[				Substitutions[MotifList,Joiners], 					{InitialTile},ToDepth] PolyTiling[Action_]:= (Action[[1]];tilemaker=Action[[2]]; MotifList=Action[[3]]; 						IniTiale=Action[[4]]; ToDepth= Action[[5]]; LeaveOuts=Action[[6]]; 						Joiners=Action[[8]];  						sploof=RepeatedSubst[MotifList,IniTiale,ToDepth,Joiners]; 					 				Join @@(	tilemaker[LeaveOuts][#] & /@  					(sploof) ))MakePicture[Action_]:=(Splee=PolyTiling[Action];					Length[Splee]					Action[[7]][Splee] )(*:[font = message; inactive; preserveAspect; endGroup]General::spell: Possible spelling error: new symbol name "rule"     is similar to existing symbols {Rule, rules}.:[font = text; inactive; initialization; preserveAspect](*Action={AuxilaryCommands, Tilemaker, MotifList,  InitValue=   	{1,{Ident},1,{0,0,0}}, Depth,  LeaveOuts,Pix,Joiners}:[font = text; inactive; initialization; preserveAspect]Commonly  Useful Commands*):[font = input; initialization; preserveAspect]*)RLApplies[groupaddress_][vect_]:= If[groupaddress==={},vect,									RLApplies[Drop[groupaddress,-1]] 									[groupaddress[[-1]][vect] ]									](*:[font = subsection; inactive; preserveAspect]SAMPLES:[font = text; inactive; initialization; preserveAspect](*Sample:     FibonaccisFibAux= (t=N[(Sqrt[5]-1)/2];Ident[x_]:=x)General::spell1: Possible spelling error: new symbol name "Ident"     is similar to existing symbol "Indent".FibSL=   { (*short interval*)  	{{2,  {}, t, 0  }},				(*long interval*)  		{{2,  {}, t, 0  },										 {1,  {}, t, t  }}  };FibTile[LO_][{n_,O_,S_,T_}]:= 	(Len=If[n===1,t*S,S]; If[LO[{n,O,S,T}],{},						{Hue[1-.18 * n], Polygon[ {{T,0},{T,.3},{T+Len,.3},{T+Len,0}} ]}])						FibLO[{n_,O_,S_,T_}]:=False;FibInit={ 1, {Ident} , 5, 0 };FibShow[Tiles_]:=Show[Graphics[Tiles,Axes->False]]FibJoiners[OO_,S_,T_,noo_,ooo_,soo_,too_]:={noo ,Join[ooo,OO], soo*S, T+S*Applies[OO][too]}FibAction= {FibAux, FibTile, FibSL, FibInit, 7, FibLO,FibShow,FibJoiners};MakePicture[FibAction]42 -Graphics-LTilesHere, Orientations are integers mod 4      scales are positive integerstranslations are {+-1,+-1}LAux= (tr={{+1,+1},{-1,1},{-1,-1},{1,-1}};			LTile=2{{+1,+1},{-1,1},{-1,0},					{0,0},{0,-1},{1,-1}};			scales=Table[1/2^k,{k,0,10}];			orient[kk_][vect_]:=({{Cos[kk*Pi/2],Sin[kk*Pi/2]}, 								{-Sin[kk*Pi/2],Cos[kk*Pi/2]}}							.vect);			LTiles=Table[Table[scales[[k]]*				orient[j][#]& /@ LTile, {j,0,3}],{k,1,5}];)LMotif=   { (*Single L Tile*)  				{	{1,	0,	1,	{0,0}	},				{1,	0,	1,	{1,1}	},				{1,	-1,	1,	{1,1}	},				{1,	+1,	1,	{1,1}	}			}};						LTiler[LO_][{n_,O_,S_,T_}]:= If[LO[{n,O,S,T}],{},	{Hue[Random[]],Polygon[ (T+#)& /@ (LTiles[[S]][[ Mod[O,4]+1]]) ] }]							LLO[{n_,O_,S_,T_}]:=False;LInit={ 1, 0 , 1, 0 };LShow[Tiles_]:=Show[Graphics[Tiles,Axes->False,AspectRatio->Automatic]]LJoiners[OO_,S_,T_,noo_,ooo_,soo_,too_]:={noo ,ooo+OO, soo+S, T+scales[[S]]*orient[OO+ooo][too]}LAction= {LAux, LTiler, LMotif, LInit, 2, LLO,LShow,LJoiners};MakePicture[LAction]32 -Graphics-BWG LTilesHere, Orientations are integers mod 4      scales are positive integerstranslations are {+-1,+-1}LAux= (tr={{+1,+1},{-1,1},{-1,-1},{1,-1}};			LTile=2{{+1,+1},{-1,1},{-1,0},					{0,0},{0,-1},{1,-1}};			scales=Table[1/2^k,{k,0,10}];			orient[kk_][vect_]:=({{Cos[kk*Pi/2],Sin[kk*Pi/2]}, 								{-Sin[kk*Pi/2],Cos[kk*Pi/2]}}							.vect);			LTiles=Table[Table[scales[[k]]*				orient[j][#]& /@ LTile, {j,0,3}],{k,1,5}];)BLMotif=   { (*BWG Tiles*)  				{	{1,	0,	1,	{0,0}	},				{2,	0,	1,	{1,1}	},				{2,	-1,	1,	{1,1}	},				{2,	+1,	1,	{1,1}	}			},			{	{1,	0,	1,	{0,0}	},				{2,	0,	1,	{1,1}	},				{3,	-1,	1,	{1,1}	},				{3,	+1,	1,	{1,1}	}			},			{	{1,	0,	1,	{0,0}	},				{3,	0,	1,	{1,1}	},				{3,	-1,	1,	{1,1}	},				{3,	+1,	1,	{1,1}	}			}						};						BLTiler[LO_][{n_,O_,S_,T_}]:= If[LO[{n,O,S,T}],{},	{GrayLevel[1.5-.5*n],Polygon[ (T+#)& /@ (LTiles[[S]][[ Mod[O,4]+1]]) ] }]							LLO[{n_,O_,S_,T_}]:=False;LInit={ 1, 0 , 1, 0 };LShow[Tiles_]:=Show[Graphics[Tiles,Axes->False,AspectRatio->Automatic]]LJoiners[OO_,S_,T_,noo_,ooo_,soo_,too_]:={noo ,ooo+OO, soo+S, T+scales[[S]]*orient[OO+ooo][too]}BLAction= {LAux, BLTiler, BLMotif, LInit, 4, LLO,LShow,LJoiners};MakePicture[BLAction]512 -Graphics-DodecaFoamThese are all commands that need to be executed just once  (and so are not included in DodAux)g=N /@ (Sqrt[5] +1)/2;t=1/g;MaxDepth=10;G=Table[t^k,{k,-1, 2MaxDepth}];  (* G={g,1,t,...} *)R[theta_]:=Block[{s=N[Sin[theta]],c=N[Cos[theta]]},{{c,s,0},	{-s,c,0},{0,0,0}}];(* We need individual actions:   *)Invert[dodont_Integer (*Mod 2*)][vect_List]:= 				vect*{{1,1,1},{-1,-1,-1}}[[dodont]];RAlong[axis_Integer(*x-1,z-3*)][dodont_Integer (*Mod 2*)][vect_List]:=				vect*{{1,1,1},RotateRight[{-1,1,1},axis-1]}[[dodont]];R5=Table[MatrixPower[.5{{1,-g,t},{g,t,-1},{t,1,g}},k],{k,1,4}];Rot5[pinth_Integer (*Mod 5*)(*about   (1,0,g)*)][vect_List]:= (nnn=Mod[pinth,5]; 	If[nnn===0,	vect,				Dot[R5[[nnn]],vect]]);Rot3[pinth_Integer (*Mod 3*)(*cwise about   (1,1,1)*)][vect_List]:=				RotateRight[vect,pinth-1];				Ident[vect_]:=vect;fimages[mmap_,order_,face_]:=    Chop[#,10^-13]& @ 	Table[mmap[k][face[[j]]],{k,1,order},{j,1,Length[face]}];General::spell1:    Possible spelling error: new symbol name "Invert"     is similar to existing symbol "Insert".General::spell1:    Possible spelling error: new symbol name "Ident"     is similar to existing symbol "Indent".(*We next give parts useful for defining the dodecas *)dodecaFace= t{{g, 0, t},   {1, 1, 1},  {0, t, g},   {0, -t, g},    {1, -1, 1}  };Dodeca6Coloring[face_ (*normal to 1,0,g*)]:=   Join @@ 												(fimages[Invert,2,#]&/@  												Block[{fff= fimages[RAlong[3],2,face]},    												Join[ fimages[Rot5,5,fff[[2]] ] , { face }] ]);dodeca6x2s= Table[Dodeca6Coloring[t^k*dodecaFace],{k,0,7}];(* Now more commands:  *)(*CoordssOf[fundunitlist_][{n_, O_, S_, T_}]:=		Table[								Chop[#,10^-13]& @ ((T+#)&  /@ fundunitlist[[S]][[k]] )								,{k,1,Length[fundunitlist[[S]]]}]*)DColor=	Table[GrayLevel[.2(k-1)],{k,1,6}];Here are the commands in DodAction;  note group actions read R-L, unlike in old DFoamDMotifs={(*1 First Dodeca*)  	{	{1,{},0,{0,0,0}}	},		(*2 Second Dodeca*)	{	{3,{},0,{0,0,0}}	},	(*unused yet*)		(*3 Third Dodeca*)	{	{3,{},0,{0,0,0}}	},	(*unused yet, very busy*)		(*4 First Hat*)		{	{5,{},1,{0,0,0}}	},		(*5 Second Hat*) Join[	{	{1,{},1,{t,0,1}}, 		{4,{},1,{t,0,1}}},					Table[	{4,{Rot5[k], RAlong[3][2]},1,{t,0,1}},{k,0,4}],					Table[	{6,{Rot5[k], RAlong[1][2]},1,{t,0,1}},{k,0,4}] 							],		(*6 First Wedge *)(*	{	{6,{Rot5[2]},1,{g,0,-t}},								{6,{Rot5[3]},1,{g,0,-t}},								{4,{RAlong[1][2]},1,{g,0,-t}}								},*) {	{6,{},0,{0,0,0}}	},			(*7 Second Wedge *) {	{7,{},0,{0,0,0}}	},		(*unused yet*)		(*8 Third Wedge *)	{	{7,{},0,{0,0,0}}	},		(*unused yet*)		(*9 Spike		*)	Join[	{{1,{},1,{1,1,1}},{9,{},1,{1,1,1}} },					Table[{4,{Rot3[k],RAlong[3][2]},1,{1,1,1}},{k,0,2}],					Table[{4,{Rot3[k]},1,{1,1,1}},{k,0,2}],					Table[{6,{Rot3[k],RAlong[1][2],Rot5[1]},1,{1,1,1}},{k,0,2}],					Table[{6,{Rot3[k],Rot5[1]},1,{1,1,1}},{k,0,2}]					]		};					DLO[{n_,O_,S_,T_}]:=(*Not[(n===1)||(n===4)||(n===5)]*)False;DTiler[fundunitlist_,color_][LO_][{n_,O_,S_,T_}]:=If[Not[LO[{n,O,S,T}]], 							sizer={0,		-1,-2,	2,1,3		(*adj if wedges added*),2,3,1}[[n]];				shifter={ {0,0,0},{0,0,0},{0,0,0},{1,0,g},{g,0,g+1},														(1-t^3){g+1,0,0},(1-t^3){g+1,0,0},														(1-t^3){g,0,0},{1,1,1} }[[n]];								Coords=N[Table[										Chop[#,10^-13]& @ 											((T+t^(S-1)*RLApplies[O][shifter]+#)&  /@ 											fundunitlist[[S+sizer]][[k]] )											,{k,1,Length[fundunitlist[[S+sizer]]]}]];								CC=Polygon /@ Coords;kli=Length[Coords]/12-1;								Flatten @@ 										{Table[{color[[kk]],CC[[12*nn+2kk-1]],CC[[12*nn+2kk]]},										{nn,0,kli},{kk,1,6}] },																				 {}]DJoiners[OO_,S_,T_,noo_,ooo_,soo_,too_]:=(sizer={0,		0,0,	0,		3,3		(*adj if wedges added*),0,0,1}[[noo]];								{noo,Join[OO,ooo],S+soo,T+t^(S-sizer)*RLApplies[OO][too]})(*hre is the problem---- wedge needs to have centers defined properly *)DInit={4,{},1,{0,0,0}}{4, {}, 1, {0, 0, 0}}DShow[Tiles_]:=Show[Graphics3D[Tiles,									Boxed->False,									PlotRange->All,									AspectRatio->Automatic,									Lighting->False,									Axes->True,									ViewPoint->{10,0,10}]]DAction= {DAux, DTiler[dodeca6x2s,DColor], DMotifs, DInit, 2, DLO,DShow,DJoiners};MakePicture[DAction]216 -Graphics3D-scree=PolyTiling[DAction];DShow[Drop[scree,{1,18}]]-Graphics3D-Show[Graphics3D[scree,									Boxed->False,									PlotRange->All,									AspectRatio->Automatic,									Lighting->False,									Axes->True,									ViewPoint->{10,0,0}]]-Graphics3D-fist[tile_]:=(tile[[1]]<11);Select[RepeatedSubst[DMotifs, DInit, 1,DJoiners],fist]{{5, {}, 2, {0, 0, 0}}}fist[tile_]:=(tile[[1]]<11);Select[RepeatedSubst[DMotifs, DInit, 2,DJoiners],fist]fist[tile_]:=(tile[[1]]<11);Select[RepeatedSubst[DMotifs, DInit, 3,DJoiners],fist]fist[tile_]:=(tile[[1]]<11);Select[RepeatedSubst[DMotifs, DInit, 4,DJoiners],fist]{{1, {}, 3, {0.618034, 0, 1.}}, {1, {}, 5, {0.854102, 0, 1.38197}},    {4, {}, 5, {0.854102, 0, 1.38197}},    {4, {Rot5[0], RAlong[3][2]}, 5, {0.854102, 0, 1.38197}},    {4, {Rot5[1], RAlong[3][2]}, 5, {0.854102, 0, 1.38197}},    {4, {Rot5[2], RAlong[3][2]}, 5, {0.854102, 0, 1.38197}},    {4, {Rot5[3], RAlong[3][2]}, 5, {0.854102, 0, 1.38197}},    {4, {Rot5[4], RAlong[3][2]}, 5, {0.854102, 0, 1.38197}},    {6, {Rot5[0], RAlong[1][2]}, 5, {0.854102, 0, 1.38197}},    {6, {Rot5[1], RAlong[1][2]}, 5, {0.854102, 0, 1.38197}},    {6, {Rot5[2], RAlong[1][2]}, 5, {0.854102, 0, 1.38197}},    {6, {Rot5[3], RAlong[1][2]}, 5, {0.854102, 0, 1.38197}},    {6, {Rot5[4], RAlong[1][2]}, 5, {0.854102, 0, 1.38197}},    {1, {Rot5[0], RAlong[3][2]}, 5, {0.854102, 0, 0.618034}},    {4, {Rot5[0], RAlong[3][2]}, 5, {0.854102, 0, 0.618034}},    {4, {Rot5[0], RAlong[3][2], Rot5[0], RAlong[3][2]}, 5,     {0.854102, 0, 0.618034}}, {4,     {Rot5[0], RAlong[3][2], Rot5[1], RAlong[3][2]}, 5, {0.854102, 0, 0.618034}}\    , {4, {Rot5[0], RAlong[3][2], Rot5[2], RAlong[3][2]}, 5,     {0.854102, 0, 0.618034}}, {4,     {Rot5[0], RAlong[3][2], Rot5[3], RAlong[3][2]}, 5, {0.854102, 0, 0.618034}}\    , {4, {Rot5[0], RAlong[3][2], Rot5[4], RAlong[3][2]}, 5,     {0.854102, 0, 0.618034}}, {6,     {Rot5[0], RAlong[3][2], Rot5[0], RAlong[1][2]}, 5, {0.854102, 0, 0.618034}}\    , {6, {Rot5[0], RAlong[3][2], Rot5[1], RAlong[1][2]}, 5,     {0.854102, 0, 0.618034}}, {6,     {Rot5[0], RAlong[3][2], Rot5[2], RAlong[1][2]}, 5, {0.854102, 0, 0.618034}}\    , {6, {Rot5[0], RAlong[3][2], Rot5[3], RAlong[1][2]}, 5,     {0.854102, 0, 0.618034}}, {6,     {Rot5[0], RAlong[3][2], Rot5[4], RAlong[1][2]}, 5, {0.854102, 0, 0.618034}}\    , {1, {Rot5[1], RAlong[3][2]}, 5, {0.618034, 0.381966, 0.763932}},    {4, {Rot5[1], RAlong[3][2]}, 5, {0.618034, 0.381966, 0.763932}},    {4, {Rot5[1], RAlong[3][2], Rot5[0], RAlong[3][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {4, {Rot5[1], RAlong[3][2], Rot5[1], RAlong[3][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {4, {Rot5[1], RAlong[3][2], Rot5[2], RAlong[3][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {4, {Rot5[1], RAlong[3][2], Rot5[3], RAlong[3][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {4, {Rot5[1], RAlong[3][2], Rot5[4], RAlong[3][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {6, {Rot5[1], RAlong[3][2], Rot5[0], RAlong[1][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {6, {Rot5[1], RAlong[3][2], Rot5[1], RAlong[1][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {6, {Rot5[1], RAlong[3][2], Rot5[2], RAlong[1][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {6, {Rot5[1], RAlong[3][2], Rot5[3], RAlong[1][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {6, {Rot5[1], RAlong[3][2], Rot5[4], RAlong[1][2]}, 5,     {0.618034, 0.381966, 0.763932}},    {1, {Rot5[2], RAlong[3][2]}, 5, {0.236068, 0.236068, 1.}},    {4, {Rot5[2], RAlong[3][2]}, 5, {0.236068, 0.236068, 1.}},    {4, {Rot5[2], RAlong[3][2], Rot5[0], RAlong[3][2]}, 5,     {0.236068, 0.236068, 1.}}, {4,     {Rot5[2], RAlong[3][2], Rot5[1], RAlong[3][2]}, 5, {0.236068, 0.236068, 1.}}    , {4, {Rot5[2], RAlong[3][2], Rot5[2], RAlong[3][2]}, 5,     {0.236068, 0.236068, 1.}}, {4,     {Rot5[2], RAlong[3][2], Rot5[3], RAlong[3][2]}, 5, {0.236068, 0.236068, 1.}}    , {4, {Rot5[2], RAlong[3][2], Rot5[4], RAlong[3][2]}, 5,     {0.236068, 0.236068, 1.}}, {6,     {Rot5[2], RAlong[3][2], Rot5[0], RAlong[1][2]}, 5, {0.236068, 0.236068, 1.}}    , {6, {Rot5[2], RAlong[3][2], Rot5[1], RAlong[1][2]}, 5,     {0.236068, 0.236068, 1.}}, {6,     {Rot5[2], RAlong[3][2], Rot5[2], RAlong[1][2]}, 5, {0.236068, 0.236068, 1.}}    , {6, {Rot5[2], RAlong[3][2], Rot5[3], RAlong[1][2]}, 5,     {0.236068, 0.236068, 1.}}, {6,     {Rot5[2], RAlong[3][2], Rot5[4], RAlong[1][2]}, 5, {0.236068, 0.236068, 1.}}    , {1, {Rot5[3], RAlong[3][2]}, 5, {0.236068, -0.236068, 1.}},    {4, {Rot5[3], RAlong[3][2]}, 5, {0.236068, -0.236068, 1.}},    {4, {Rot5[3], RAlong[3][2], Rot5[0], RAlong[3][2]}, 5,     {0.236068, -0.236068, 1.}}, {4,     {Rot5[3], RAlong[3][2], Rot5[1], RAlong[3][2]}, 5,     {0.236068, -0.236068, 1.}}, {4,     {Rot5[3], RAlong[3][2], Rot5[2], RAlong[3][2]}, 5,     {0.236068, -0.236068, 1.}}, {4,     {Rot5[3], RAlong[3][2], Rot5[3], RAlong[3][2]}, 5,     {0.236068, -0.236068, 1.}}, {4,     {Rot5[3], RAlong[3][2], Rot5[4], RAlong[3][2]}, 5,     {0.236068, -0.236068, 1.}}, {6,     {Rot5[3], RAlong[3][2], Rot5[0], RAlong[1][2]}, 5,     {0.236068, -0.236068, 1.}}, {6,     {Rot5[3], RAlong[3][2], Rot5[1], RAlong[1][2]}, 5,     {0.236068, -0.236068, 1.}}, {6,     {Rot5[3], RAlong[3][2], Rot5[2], RAlong[1][2]}, 5,     {0.236068, -0.236068, 1.}}, {6,     {Rot5[3], RAlong[3][2], Rot5[3], RAlong[1][2]}, 5,     {0.236068, -0.236068, 1.}}, {6,     {Rot5[3], RAlong[3][2], Rot5[4], RAlong[1][2]}, 5,     {0.236068, -0.236068, 1.}}, {1, {Rot5[4], RAlong[3][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {4, {Rot5[4], RAlong[3][2]}, 5, {0.618034, -0.381966, 0.763932}},    {4, {Rot5[4], RAlong[3][2], Rot5[0], RAlong[3][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {4, {Rot5[4], RAlong[3][2], Rot5[1], RAlong[3][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {4, {Rot5[4], RAlong[3][2], Rot5[2], RAlong[3][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {4, {Rot5[4], RAlong[3][2], Rot5[3], RAlong[3][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {4, {Rot5[4], RAlong[3][2], Rot5[4], RAlong[3][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {6, {Rot5[4], RAlong[3][2], Rot5[0], RAlong[1][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {6, {Rot5[4], RAlong[3][2], Rot5[1], RAlong[1][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {6, {Rot5[4], RAlong[3][2], Rot5[2], RAlong[1][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {6, {Rot5[4], RAlong[3][2], Rot5[3], RAlong[1][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {6, {Rot5[4], RAlong[3][2], Rot5[4], RAlong[1][2]}, 5,     {0.618034, -0.381966, 0.763932}},    {6, {Rot5[0], RAlong[1][2]}, 3, {0.618034, 0, 1.}},    {6, {Rot5[1], RAlong[1][2]}, 3, {0.618034, 0., 1.}},    {6, {Rot5[2], RAlong[1][2]}, 3, {0.618034, 0., 1.}},    {6, {Rot5[3], RAlong[1][2]}, 3, {0.618034, 0., 1.}},    {6, {Rot5[4], RAlong[1][2]}, 3, {0.618034, 0., 1.}}}DAction= {DAux, DTiler[dodeca6x2s,DColor], DMotifs, DInit, 2, DLO,DShow,DJoiners};scree=PolyTiling[DAction];DShow[scree]-Graphics3D-DAction= {DAux, DTiler[dodeca6x2s,DColor], DMotifs, DInit, 3, DLO,DShow,DJoiners};scree=PolyTiling[DAction];DShow[scree]-Graphics3D-^*)