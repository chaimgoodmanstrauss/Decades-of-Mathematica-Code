(***********************************************************************                    Mathematica-Compatible NotebookThis notebook can be used on any computer system with Mathematica 3.0,MathReader 3.0, or any compatible application. The data for the notebook starts with the line of stars above.To get the notebook into a Mathematica-compatible application, do one of the following:* Save the data starting with the line of stars above into a file  with a name ending in .nb, then open the file inside the application;* Copy the data starting with the line of stars above to the  clipboard, then use the Paste menu command inside the application.Data for notebooks contains only printable 7-bit ASCII and can besent directly in email or through ftp in text mode.  Newlines can beCR, LF or CRLF (Unix, Macintosh or MS-DOS style).NOTE: If you modify the data for this notebook not in a Mathematica-compatible application, you must delete the line below containing the word CacheID, otherwise Mathematica-compatible applications may try to use invalid cache data.For more information on notebooks and Mathematica-compatible applications, contact Wolfram Research:  web: http://www.wolfram.com  email: info@wolfram.com  phone: +1-217-398-0700 (U.S.)Notebook reader applications are available free of charge from Wolfram Research.***********************************************************************)(*CacheID: 232*)(*NotebookFileLineBreakTestNotebookFileLineBreakTest*)(*NotebookOptionsPosition[     14417,        329]*)(*NotebookOutlinePosition[     15499,        366]*)(*  CellTagsIndexPosition[     15455,        362]*)(*WindowFrame->Normal*)Notebook[{Cell[TextData[{  StyleBox[  "(**************************************************\n\n\tParametric Curves \Package\n\t\n\tChaim Goodman-Strauss, (c) 1997\n\t\n\***************************************************)\n\n(* Summary: We give \various functions to plot curves,\n\n\ttangents, normals, etc *)\n\t\n\t(* \YOU MUST PLACE THIS FILE IN THE PACKAGES FOLDER *)\n\t\n\t\n\t\nBeginPackage[\\"`ParametricLab`\"]\n\n(* Curves *)\nBumpyCircle::usage = \n\t",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"BumpyCircle[number,shallowness] gives a parametric equation\n\t{x(t), \y(t)} of a bumpy unit circle  of mean radius 1. \n\tnumber is the number of \bumps; \n\tthe larger shallowness is, the larger the bumps. When plotting, t \should run from 0 to 1.\n\"\n\t\t\n\tt::usage = \"Main parameter; For closed \curves, always runs from 0 to 1\"\t\n\t\t",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\nSpirograph::usage = \n ",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"Spirograph[p,q,s] gives the  parametric equation for the Spirograph: \n  \we have two wheels, a big one with p teeth, little with q teeth. The little\n \ wheel has radius 1 and is inside big wheel. Hole for pen is distance \n  s \from center of little wheel.  The curve produced is classically known as a\n \hypotrochoid.  When plotting, t should run from 0 to 1.\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\nLissajous::usage =\n",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"A lisssajous curve is of the form {Sin[ a t], Cos[b t]}\nFor relatively \prime m,n, Lissajous[m,n] returns a curve with \nm bumps one way and n bumps \the other way.  \nWhen plotting, t should run from 0 to 1.\"\n",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\nParPlot::usage = \n",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"ParPlot[{xt,yt},{tmin,tmax},(options)] plots the curve\n{xt,yt} as a \function of t, as t varies from tmin to tmax. \"\n\n\ParPlotOptions::usage=\"Options for ParPlot include all standard Graphics\n\options, as well as  ParCurve, PlotPoints (resolution of curve), LineWidth, \ParDots, \nParTans,  ParAcc, ParNorms, ParUnitNorms.\" \n\nParCurve::usage=\" \An option for ParPlot. ParCurve->True is the default. When ParCurve->False, \the\nparametric curve itself is not plotted\"\n\nLineWidth::usage=\"An option \for ParPlot. This sets the absolute thickness of all lines.\"\n\n",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["NumDots::usage",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "=\" An option for ParPlot. This sets the number of\ndots or vectors to be \placed along the curve\"\n\n",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\n\t\tParDots::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot. ParDots->True\n\t\tplots colored dots along the \curve, spaced as t varies.\n\t\t At tmin the  dots aregreen, at tmax, the \dots are purple.\"\n\t\t ",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\tDotWidth::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot. DotWidth sets the\n\t\tabsolute size of the dots \if ParDots->True\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\n\t\t\n\t\tTanLength::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot.\n\t\tWhen ParTan->True, the length of the tangent \vectors is scaled\n\t\tto an appropriate size, so they don't dominate the \image.\n\t\tThis allows this scaling to be adjusted\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\n\t\tPolarPlot::usage=\n\t",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\t\"PolarPlot[{r,theta},{tmin,tmax},(opts)] plots (r, theta) as\n\t\t\functions of t as t runs from t min to tmax. opts is optional\n\t\tParPlot \options\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\n\n\tParTans::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot.\n\t\tWhen ParTan->True, the tangent vectors are \placed along the curve\"\n\t\t\n\t\t",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\tParAcc::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot.\n\t\tWhen ParAcc->True, the acceleration vectors \are placed along the curve\"\n\t\t\n\t\t",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\tParNorms::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot.\n\t\tWhen ParNorms->True, the normal vectors  \(d/dt  v/||v||) are placed along the curve. \n\t\tParNorms->True overides \ParAcc->True\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\n\t\t",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox["\n\t\t",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\tParUnitNorms::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot.\n\t\tWhen ParUnitNorms->True, the unit normal \vectors  (|| (d/dt  v/||v||) ||) are placed along the curve. \n\t\t\ParUnitNorms->True overides ParAcc->True and  ParNorms->True\"\n\t\t\n\t\t\UnitNorm::usage=\"An option for ParPlot. Scales unit norm\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\n\t\tParPlotStyle::usage=",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "\"An option for ParPlot. Allows graphics primatives to be inserted\n\t\t\t\\t\t\t\t\t\tat the beginning of the list of primatives produced by ParPlot.\"\\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tParShow::usage=\"An option for \ParPlot. Defaults to True, but when set to False, allows\n\t\t\t\t\t\t\t\t\t\t\\t\t\tone not to Show the graphics output. Used to combine images.\"",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\t\t\nBegin[\"`Private`\"]  ",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox["(* To learn Mathematica check this out! *)",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox["\n\n\n(* Curves *)\n\n",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "BumpyCircle[number_,shallowness_]:=\n\t(Sin[number 2 Pi \t]+shallowness)/(1+shallowness) *\n\t\t{Sin[2 Pi t], Cos[2 Pi t]}\n\t\t\n\t\t\\n\t\t\nLissajous[m_,n_]:= Module[{tt},tt=GCD[m,n]; \n\t{Sin[m/tt 2 Pi t], \Cos[n/tt 2 Pi t]}] \n\t\t\n\t\t\n\t\t\nSpirograph[p_Integer,q_Integer,s_]:= \Module[{tmax},\ntmax=2Pi*q/GCD[p,q]; \n{(p/q-1)Cos[tmax t]+s Cos[(1-p/q)tmax \t],\n\t(p/q-1)Sin[tmax t]+s Sin[(1-p/q)tmax t]\t} ]",    InitializationCell->True,    AspectRatioFixed->True,    FontFamily->"Times",    FontWeight->"Plain"],  StyleBox[  "\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t(* Plotting *)\t\t\t\n\n\n\n\n\ParPlot[curve_,{varmin_,varmax_},opt___]:=\n\t\n\t\Module[{opts,optins,cccurve,dots,tans,normals,norms,\n\t\t\t\linesize,dtsize,parstyle,noshow,grlist},\n\topts={opt,Axes->True};\n\t\optins=FilterOpts[ParLabOptions, ParLabDefaults,opts];\n\t\cccurve=SetDefault[opts,ParCurve,True];\n\tdots \=SetDefault[opts,ParDots,False];\n\ttans =SetDefault[opts,ParTans,False];\n\t\norms = SetDefault[opts,ParAcc,False];\n\tnormals = \SetDefault[opts,ParNorms,False];\n\tunnorms = \SetDefault[opts,ParUnitNorms,False];\n\tlinesize = \SetDefault[opts,LineWidth,1];\n\tdtsize=SetDefault[opts,DotWidth,5];\n\t\parstyle=SetDefault[opts,ParPlotStyle,{}];\n\t\noshow=!SetDefault[opts,ParShow,True];\n\t\ngrlist=Graphics[ Join[parstyle,\n\\t\t{AbsoluteThickness[linesize],AbsolutePointSize[dtsize]},\n\t\If[cccurve,ccurve[curve,{varmin,varmax},opts],{}],\n\t\If[dots,ddots[curve,{varmin,varmax},opts],\t\t{}],\n\t\If[tans,ttans[curve,{varmin,varmax},opts],\t\t{}],\n\tIf[norms || normals || \unnorms,nnorms[curve,\n\t\t\t\t\t\t\t\t\t\t\t{varmin,varmax},opts \,normals,unnorms ],{}]  ],\n\t\toptins];\n\t\tIf[noshow,grlist,Show[grlist] \]]\n\t\t\n\t\t\n\t\t\n\n\nParLabOptions = {DotWidth,LineWidth,TanLength,\n\t\t\\t\t\tPlotPoints,NumDots,ParCurve,ParTans,ParDots,ParNorms,ParAcc,\n\t\t\t\t\t\ParUnitNorms,UnitNorm,ParPlotStyle,ParShow};\nParLabDefaults = \{AspectRatio->Automatic, Axes->True};\n\nFilterOpts[removeopts_,newdefaults_, \optionlist_] := \n\t\t\tSequence @@ Join[\n\t\t\t\Select[optionlist,Not[MemberQ[removeopts,First[#]]]&],\n\t\t\t newdefaults];\n\\n",    InitializationCell->True,    AspectRatioFixed->True],  StyleBox[  "SetDefault[optionlist_,option_,value_]:= (option /. \n\t\t  \(Select[optionlist,First[#]===option &])\n\t\t    /. option -> value);\n\t\t  \  \n",    InitializationCell->True,    AspectRatioFixed->True,    FontColor->GrayLevel[0.333318]],  StyleBox[  "ccurve[curve_,{varmin_,varmax_},opts_]:=\n\tModule[{numsteps,pointlist}, \n\\t\tnumsteps = SetDefault[opts,PlotPoints,100];\n\t\n\t\t\t\pointlist=Table[curve /. \n\t\t\t{t->tt*((varmax-varmin)/(numsteps))+varmin},\\n\t\t\t{tt,0,numsteps}]//N;\n\t\t{Line[pointlist]} ]\n\t\t\t\t\n\ddots[curve_,{varmin_,varmax_},opts_]:=\t\n\t\tModule[{numsteps,pointlist}, \n\\t\tnumsteps = SetDefault[opts,NumDots,50];\n\t\tpointlist=Table[curve /. \n\t\\t\t{t->tt*((varmax-varmin)/(numsteps))+varmin},\n\t\t\t{tt,0,numsteps}]//N;\n\\t\t\n\t\t\tTable[{Hue[tt*(.6/numsteps)+.2]//N,\n\t\t\t\t\t\Point[pointlist[[tt+1]]]},\n\t\t\t\t\t{tt,0,numsteps}] ]\n\t\t\t\t\t\n\t\n\t\t\\n\t\tPolarPlot[{rt_,theta_},{tmin_,tmax_},opts___]:=\n\t\tParPlot[{rt \Cos[theta],rt Sin[theta]},\n\t\t\t{tmin,tmax},opts]\t\n\t\n\t\n\t\n\t\n\t\nnorms[curve_,{varmin_,varmax_},opts_,normed_,unnormed_]:=\t\t\n\t\Module[{numsteps,pointlist,tanl,dc,ddc,totallength,unitnorm},\n\t\t\t\t\n\t\t\\t\tdc = D[curve,t]; \n\t\t\t\tnumsteps = SetDefault[opts,NumDots,50];\n\t\t\t\\tunitnorm = SetDefault[opts,UnitNorm,.25];\n\t\t\t\tIf[normed || \unnormed,ddc=D[dc/(dc.dc)^(1/2),t],ddc= D[dc,t]];\n\t\t\t\tIf[unnormed, ddc = \ddc / Sqrt [ddc.ddc] * unitnorm ];\n\t\ttanl = \If[!unnormed,SetDefault[opts,TanLength,  1] /\n\t\t\t\t\t\t\t\tnumsteps \/(varmax-varmin) //N,1];\n\t\tpointlist=Table[curve /. \n\t\t\t\{t->tt*((varmax-varmin)/(numsteps))+varmin},\n\t\t\t{tt,0,numsteps}]//N;\n\t\Table[{Hue[tt*(.6/numsteps)+.2]//N,\n\t\Line[{pointlist[[tt+1]],pointlist[[tt+1]]+\n\ttanl*ddc/.\n\t\t\t\t\{t->tt*((varmax-varmin)/(numsteps))+varmin}}]}//N,\n\t\t\t\t{tt,0,numsteps}] \]\n\t\n\t\n\t\nttans[curve_,{varmin_,varmax_},opts_]:=\t\t\n\t\Module[{numsteps,pointlist,tanl,dc,totallength},\n\t\t\t\t\n\t\tdc = \D[curve,t]; \n\t\tnumsteps = SetDefault[opts,NumDots,50];\n\t\ttanl = \SetDefault[opts,TanLength, 2.5] /\n\t\t\t\t\t\t\t\tnumsteps /(varmax-varmin) \//N;\n\t\tpointlist=Table[curve /. \n\t\t\t\{t->tt*((varmax-varmin)/(numsteps))+varmin},\n\t\t\t{tt,0,numsteps}] //N;\n\t\Table[{Hue[tt*(.6/numsteps)+.2],\n\t\t\t\t\t\t\t\tLine[{pointlist[[tt+1]],\n\t\\t\t\t\t\t\t\t\t\t\t\t\t\tpointlist[[tt+1]]+tanl*dc/.\n\t\t\t\t\{t->tt*((varmax-varmin)/(numsteps))+varmin}}]},\n\t\t\t\t{tt,0,numsteps}] ]\n\\t\t\t\t\n\n\t\t\t\n\t\t\t\n\n\t\t\t  \n\t\t\t\n\t\t\nEnd[]\n\n\Protect[ParPlot,t,Spirograph, Lissajous, BumpyCircle,PolarPlot,\n\DotWidth,LineWidth,TanLength,\n\t\t\t\t\t\NumDots,ParCurve,ParTans,ParDots,ParNorms,ParAcc,\n\t\t\t\t\t\ParUnitNorms,UnitNorm,ParPlotStyle,ParShow]\n\nEndPackage[]",    InitializationCell->True,    AspectRatioFixed->True]}], "Input",  InitializationCell->True,  AspectRatioFixed->True]},FrontEndVersion->"Macintosh 3.0",ScreenRectangle->{{0, 640}, {0, 460}},AutoGeneratedPackage->None,WindowToolbars->{},CellGrouping->Manual,WindowSize->{520, 365},WindowMargins->{{44, Automatic}, {Automatic, 1}},PrivateNotebookOptions->{"ColorPalette"->{RGBColor, -1}},ShowCellLabel->True,ShowCellTags->False,RenderingOptions->{"ObjectDithering"->True,"RasterDithering"->False},MacintoshSystemPageSetup->"\<\00<0001804P000000]P2:?oQon82n@960dL5:0?l0080001804P000000]P2:0010000I00000400`<300000BL?00400@0000000000000006P801T1T0000000000000000000000000000000000000000000\>"](***********************************************************************Cached data follows.  If you edit this Notebook file directly, not usingMathematica, you must remove the line containing CacheID at the top of the file.  The cache data will then be recreated when you save this file from within Mathematica.***********************************************************************)(*CellTagsOutlineCellTagsIndex->{}*)(*CellTagsIndexCellTagsIndex->{}*)(*NotebookFileOutlineNotebook[{Cell[1711, 51, 12703, 277, 70, "Input",  InitializationCell->True]}]*)(***********************************************************************End of Mathematica Notebook file.***********************************************************************)